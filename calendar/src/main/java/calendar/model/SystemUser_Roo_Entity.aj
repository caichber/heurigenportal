// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package calendar.model;

import calendar.model.SystemUser;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SystemUser_Roo_Entity {
    
    declare @type: SystemUser: @Entity;
    
    @PersistenceContext
    transient EntityManager SystemUser.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer SystemUser.version;
    
    public String SystemUser.getUserId() {
        return this.userId;
    }
    
    public void SystemUser.setUserId(String id) {
        this.userId = id;
    }
    
    public Integer SystemUser.getVersion() {
        return this.version;
    }
    
    public void SystemUser.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void SystemUser.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void SystemUser.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SystemUser attached = SystemUser.findSystemUser(this.userId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void SystemUser.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void SystemUser.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public SystemUser SystemUser.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        SystemUser merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager SystemUser.entityManager() {
        EntityManager em = new SystemUser().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long SystemUser.countSystemUsers() {
        return entityManager().createQuery("SELECT COUNT(o) FROM SystemUser o", Long.class).getSingleResult();
    }
    
    public static List<SystemUser> SystemUser.findAllSystemUsers() {
        return entityManager().createQuery("SELECT o FROM SystemUser o", SystemUser.class).getResultList();
    }
    
    public static SystemUser SystemUser.findSystemUser(String userId) {
        if (userId == null || userId.length() == 0) return null;
        return entityManager().find(SystemUser.class, userId);
    }
    
    public static List<SystemUser> SystemUser.findSystemUserEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM SystemUser o", SystemUser.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
